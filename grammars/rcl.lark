start: node_clause+

node_clause: "node" NODE_NAME "{" topic_list (guarantee)+   "}"



NODE_NAME: LETTER+

topic_list : "topics" "(" (topic ("," topic)*)? ")"

topic: TYPE WORD


//ros types
TYPE: "bool"
    | "int8"
    | "uint8"
    | "int16"
    | "uint16"
    | "int32"
    | "uint32"
    | "int64"
    | "uint64"
    | "float32"
    | "float64"
    | "string"
    | "time"
    | "duration"
    | FOL_NAME "/" FOL_NAME



guarantee : ("guarantee"| "G") "(" formula ")"

formula: atomic_formula -> atom
        | "not" formula -> negation
        | formula "and" formula -> and_form
        | formula "or" formula -> or_form
        | formula "->" formula -> implies
        | formula "<=>" formula -> iff
        | "(" formula ")"
        | "forall" "(" variables (";"|"|") formula ")" -> forall
        | "exists" "(" variables (";"|"|") formula ")" -> exists
        | "exists_unique" "(" variables ";" formula ")" -> exists_unique

atomic_formula  : BOOLEAN
                | term "==" term -> equals
                | term "!=" term -> not_equals
                | term "in" term -> in
                | term "!in" term -> not_in
                | PRED_NAME "(" terms ")" -> predicate


arith : (VARIABLE|NUMBER) ARITH_OP (VARIABLE|NUMBER)

ARITH_OP: "+" | "-" | "*" | "/"

BOOLEAN : "TRUE" | "FALSE"

terms : term ("," term)*

term : BOOLEAN
      | VARIABLE
      | arith
      | "(" VARIABLE ("," VARIABLE)*  ")" -> tuple
      | "{" VARIABLE ("," VARIABLE)* "}" -> set
      | CONSTANT
      | FUNC_NAME "(" terms ")" -> function
      | "\""  FOL_NAME "\""  -> string_literal
      | builtin ("." builtin)*

builtin : "REAL" | "INTEGER" | "NATURAL"

variables : "(" VARIABLE ("," VARIABLE)*  ")" -> tuple
          | VARIABLE ("," VARIABLE)*

VARIABLE : FOL_NAME
CONSTANT: FOL_NAME


FUNC_NAME: (LCASE_LETTER|DIGIT) ("'"|"_"|LETTER|DIGIT)*
PRED_NAME: (UCASE_LETTER|DIGIT) ("'"|"_"|LETTER|DIGIT)*


FOL_NAME: ("'"|"_"|LETTER|DIGIT)("'"|"_"|LETTER|DIGIT)*

%import common.DIGIT
%import common.LETTER
%import common.UCASE_LETTER
%import common.LCASE_LETTER


%import common.WORD
%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.LETTER
%import common.INT -> NUMBER
%import common.WS

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT
