types
{
  WayP : REAL x REAL --> NATURAL ;
  RadStat : {red, orange, green} ;
}

node agent
{

inputs( output_of(navigation), output_of(radiationSensor), radiationStatus : in RadStat
  wayP : WayP )

outputs( command in {move(REAL, REAL), inspect(NATURAL) } )

topics(
gazebo_radiation_plugins/Command command matches(command),
gazebo_radiation_plugins/Inspection inspected matches(inspected),
gazebo_radiation_plugins/At at matches(at),
int16 wayP matches(wayP),
string radiationStatus matches(radiationStatus)
)

assume(
radiationStatus in {red, orange, green}
)

guarantee(
forall(x', y' in REAL, i in NATURAL |

  at(x', y') == TRUE and wayP(x', y') == i and inspected(i) == TRUE and radiationStatus !in {red, orange} ->
  exists(x, y in REAL | wayP(x, y) == i + 1 and command == move(x, y) )

  //Kinda unhappy about the last ==, in my head it should be = or := but oh well.
  and at(x', y') == TRUE and wayP(x', y') == i and inspected(i) == FALSE -> command == inspect(i)

  and radiationStatus in {red, orange} or not exists( x, y in REAL | wayP(x, y) == i + 1 )
  -> exists (x'', y'' in REAL | wayP(x'', y'') == 0 and command == move(x'', y'') )
  )
)

}


node localisation
{

inputs()
outputs( position : REAL x REAL --> BOOL )

//input or output?
topics(geometry_msgs/PoseWithCovarianceStamped amcl_pose)

assume(TRUE)

guarantee( exists_unique(x, y in REAL | Position(x, y) ) )

}

node navigation
{

inputs( output_of(localisation), output_of(agent) ) // output_of, good or bad?

outputs( at: REAL x REAL --> BOOL )

topics(
gazebo_radiation_plugins/Command command matches(command),
int16 currentLoc matches(position),
gazebo_radiation_plugins/At at matches() at)

assume(exists_unique(x, y in REAL | position(x,y) == TRUE ) )

guarantee(forall(x, y in REAL | command == move(x, y) and position(x, y) == TRUE <=> at(x, y) == TRUE) )

}


node radiationSensor
{

inputs( r in REAL , output_of(agent))

output( radiationStatus in {red, orange, green}, inspected : NATURAL --> BOOL )


topics(gazebo_radiation_plugins/Simulated_Radiation_Msg r matches(r),
gazebo_radiation_plugins/Command command matches(command),
gazebo_radiation_plugins/Inspection inspected matches(inspected),
string radiationStatus matches(radiationStatus) )

assume( 0 <= r )

guarantee(
forall( i in NATURAL | command == inspect(i) ->
(inspected(i) == TRUE
and 0 <= r < 120 -> radiationStatus == green
and 120 <= r < 250 -> radiationStatus == orange
and 250 <= r -> radiationStatus == red )
)
)

}
