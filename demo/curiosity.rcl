constants
{
  Wayp = {wayA, wayB, wayC, origin } ;
}

types
{
  LowRad : Wayp --> BOOL ;
  Windy : Wayp --> BOOL ;

//  Arms : Up | Down ;
//  Mast : Up | Down ;

}

node Agent
{
// is this right, or is this Wayp is an empty set??

inputs ( arm_result : BOOL, mast_result : BOOL, wheels_result : BOOL, low_rad : LowRad, windy : Windy )
outputs( move_to : Wayp, arm_down : BOOL, mast_down : BOOL  )

topics()

assume( TRUE )


guarantee( forall(w in in.Wayp | (in.windy(w) == TRUE <->  out.arm_down == TRUE and out.mast_down == TRUE )
and ( out.move_to(w) <-> in.arm_result == TRUE and in.mast_result == TRUE )
) )


guarantee( forall(w in in.Wayp | out.move_to(w) <-> in.low_rad(w) == TRUE  ) )

guarantee( forall(w in in.Wayp | out.move_to(w) -> in.wheels_result == TRUE ) ) // implicitly assumes that move_result relates to move_to(w)




// equals or assignment?
// Also...what the hell is this?
//guarantee( w == Wayp <=> w == {} )

// I think "act = patrol.." here should be an assignment
// from diagram: %when it receives start from rosbridge it sends the message to patrol the first waypoint
//guarantee( start -> act = move_to(w1) and w1 !in W )
//guarantee( msg ==  start -> act == move_to(w1) and w1 !in w )

// from diagram: %when it receives a success move result message, then it sends the message to patrol the next waypoint
// Again, I think "act = patrol..." should be assignment. Also, what the hell? Why is this "patrol(w1)" again!?
//guarantee( move_result == TRUE -> act == move_to(w1) and w1 !in w )


}

node EnvironmentInterface
{
// rad and wind are 'internal inputs' ?
inputs (move_to : Wayp, arm_down : BOOL, mast_down : BOOL, rad: REAL, wind : REAL, wheels_result : BOOL)
outputs ( move_to : Wayp, arm_down : BOOL, mast_down : BOOL, wheels_result : BOOL, low_rad : LowRad, windy : Windy )

topics()

assume( in.rad >= 0  )
assume( in.wind >= 0 )

//Abstraction for this?
guarantee(out.mast_down == in.mast_down ) // mast_down remains unchanged
guarantee(out.arm_down == in.arm_down  ) // arm_down remains unchanged
guarantee(out.wheels_result == in.wheels_result ) // wheels_result remains unchanged
guarantee(out.move_to == in.move_to ) // wheels_result remains unchanged

guarantee(in.rad(w) <= 5 ->  out.low_rad(w) == TRUE  ) // radiation lower than "5" means low_rad is TRUE
guarantee(in.wind(w) <= 5 -> out.windy(w) == FALSE ) // wind lower than "5" means windy is FALSE

}

node ArmClient
{
inputs  (arm_down : BOOL)

outputs ( arm_result : BOOL )

topics()

assume(  )

guarantee( in.done == TRUE -> out.arm_result == TRUE )
}

node ArmServer
{

inputs ( arm_down : BOOL)
outputs ( arm_result : BOOL )

topics()

assume( TRUE)

guarantee( out.done == TRUE )
}

node MastClient
{
inputs ( msg : MISSING_TYPE , r: BOOL)
outputs (a_msg : MessageType  )

topics()

assume(Guarantee_of(R) and Guarantee_of(Ms) )

// I think this should be an assignment
// What is "g"
guarantee(g == act)
}

node MastServer
{
inputs ( a_msg : MessageType)
outputs ( r : BOOl )

topics()

assume(Guarantee_of(Mc))

guarantee(r == TRUE -> executed(g) == TRUE)
}

node WheelsClient
{
inputs ( msg : MISSING_TYPE , r: BOOL)
outputs (a_msg : MessageType  )

topics()

assume(Guarantee_of(R) and Guarantee_of(Ws) )

// I think this should be an assignment
// What is "g"
guarantee( g == act)
}

node WheelsServer
{
inputs ( a_msg : MessageType)
outputs ( r : BOOL)

topics()

assume( g == act)

guarantee( r == TRUE -> executed(g) == TRUE )
}
